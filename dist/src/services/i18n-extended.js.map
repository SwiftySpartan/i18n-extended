{"version":3,"file":"i18n-extended.js","sourceRoot":"","sources":["../../../src/services/i18n-extended.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAG3C,IAAM,KAAK,GAAG,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAE1D;IAME;QAFQ,aAAQ,GAAW,IAAI,CAAC;IAEjB,CAAC;IAER,yCAAkB,GAA1B;QAAA,iBAEC;QADC,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC,UAAC,IAAW,IAAK,OAAA,IAAI,CAAC,QAAQ,CAAC,uBAAoB,KAAI,CAAC,QAAQ,OAAG,CAAC,EAAnD,CAAmD,CAAC,CAAC,CAAC,CAAC,CAAC;IACvH,CAAC;IAEM,kCAAW,GAAlB,UAAmB,QAAgB;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,oCAAa,GAApB,UAAqB,IAAY;QAC/B,IAAI,gBAAgB,GAAG,IAAI,CAAC;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAY,CAAC;QACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,gBAAgB,CAAC;QAC1B,CAAC;QACD,IAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC;QAClD,WAAW,CAAC,IAAI,EAAE,UAAC,GAAQ,EAAE,MAAW;YACtC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,MAAM,CAAC,gBAAgB,CAAC;YAC1B,CAAC;YACD,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAe,CAAC;YACtE,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,UAAA,IAAI;gBAClC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;YACjC,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1C,gBAAgB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC;IAC1B,CAAC;;gBArCF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;uBAPD;CA2CC,AAtCD,IAsCC;SAnCY,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\n\ndeclare const require: any;\nconst files = require(\"./i18n-extended-translation-data\");\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class i18nExtended {\n  private language: string = 'en';\n\n  constructor() {}\n\n  private getTranslationFile() {\n    return files.getTranslationStrings().filter((item:string) => item.includes(`target-language=\"${this.language}\"`))[0];\n  }\n\n  public setLanguage(langCode: string) {\n    this.language = langCode;\n  }\n\n  public translateText(text: string) {\n    let translatedString = text;\n    const file = this.getTranslationFile() as string;\n    if (!file) {\n      return translatedString;\n    }\n    const parseString = require('xml2js').parseString;\n    parseString(file, (err: any, result: any) => {\n      if (err) {\n        console.error(err);\n        return translatedString;\n      }\n      const list = result.xliff.file[0].body[0]['trans-unit'] as Array<any>;\n      const translation = list.filter(item => {\n        return item.source[0] === text;\n      });\n      if (translation && translation.length > 0) {\n        translatedString = translation[0].target[0];\n      }\n    });\n    return translatedString;\n  }\n}\n"]}