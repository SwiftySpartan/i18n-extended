{"version":3,"file":"i18n-extended.js","sourceRoot":"","sources":["../../../src/services/i18n-extended.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';\n\ndeclare const require: any;\n\nexport const I18N_EXTENDED_DATA = new InjectionToken<string>('I18N_EXTENDED_DATA');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class i18nExtended {\n  private language: string = 'en';\n  private files: [string];\n\n  constructor(@Inject(I18N_EXTENDED_DATA) @Optional() public i18nData?: any) {\n    if (!this.files) {\n      this.files = this.i18nData();\n    } else {\n      // Incase we cannot get the data or fidn the files just return default\n      // text\n      this.files = [''];\n    }\n  }\n\n  private getTranslationFile() {\n    return this.files.filter((item:string) => item.includes(`target-language=\"${this.language}\"`))[0];\n  }\n\n  public setLanguage(langCode: string) {\n    this.language = langCode;\n  }\n\n  public translateText(text: string, variables?: Array<string | number>, description?: string) {\n    let translatedString = text;\n    try {\n      const file = this.getTranslationFile() as string;\n    if (!file) {\n      return translatedString;\n    }\n    const sources = file.match(/<source\\b[^>]*>(.*?)<[/]source>/g);\n    const targets = file.match(/<target\\b[^>]*>(.*?)<[/]target>/g);\n\n    if (!sources || !targets) {\n    \treturn text;\n    }\n\n\t\tlet translationObject: TranslationUnit[] = [];\n    for (let i = 0; i < sources.length; i++) {\n    \tif (i === 0) {\n    \t\ttranslationObject = [{\n\t\t\t\t\tsource: sources[i].replace(/<source\\b[^>]*>/g, '').replace(/<[/]source>/g, ''),\n\t\t\t\t\ttarget: targets[i].replace(/<target\\b[^>]*>/g, '').replace(/<[/]target>/g, ''),\n\t\t\t\t}]\n    \t} else {\n\t\t\t\ttranslationObject.push({\n\t\t\t\t\tsource: sources[i].replace(/<source\\b[^>]*>/g, '').replace(/<[/]source>/g, ''),\n\t\t\t\t\ttarget: targets[i].replace(/<target\\b[^>]*>/g, '').replace(/<[/]target>/g, ''),\n\t\t\t\t});\n    \t}\n    }\n\n    translatedString = this.cottonReplaceAlogithm(text, translationObject, variables);\n    } catch(e) {\n      return translatedString;  \n    }\n    return translatedString;\n  }\n\n  private cottonReplaceAlogithm(text: string, units: TranslationUnit[], variables?:  Array<string | number>): string {\n    let translatedText = text;\n\n    if (typeof text != 'string' || !text) {\n      return translatedText;\n    }\n\n    if (!units) {\n      return translatedText;\n    }\n\n    for (let unit of units) {\n      let s = unit.source;\n\t\t\tlet t = unit.target;\n\n\t\t\t// Check if the unit has a source and target\n\t\t\t// exit the loop if one doesn't exist\n\t\t\tif (!s || !t) {\n\t\t\t  continue;\n\t\t\t}\n      // Simple quick find\n      if (typeof s === 'string' && s === text) {\n\t\t\t\t// Go straight to the end of the method and returns the string\n\t\t\t\ttranslatedText = t;\n\t\t\t\tbreak;\n      }\n\n      if (variables && this.isTranslation(text, s, variables)) {\n\t\t\t\ttranslatedText = this.digestTranslation(text, s, t, variables);\n      \tbreak;\n      }\n\n      if (this.hasInterpretation(s) && this.isTranslation(text, s)) {\n\t\t\t\ttranslatedText = this.digestTranslation(text, s, t);\n\t\t\t\tbreak;\n      }\n    }\n    // return what has been found return not done before as\n    // you want to ensure a direct match gets returned over a\n    // close match and therefore needs to finish running through the list\n    if (!translatedText) {\n      translatedText = text;\n    }\n    return translatedText;\n  }\n\n  private isTranslation(text: string, source: string, variables?: Array<string | number>): boolean {\n\t\tlet matCnt = 0;\n\t\tconst te = this.breakSentanceIntoChars(text);\n\t\tconst se = this.breakSentanceIntoChars(this.removeInterpolation(source));\n\t\tif (!se || !te) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (variables) {\n\t\t\tlet string = source;\n\t\t\tfor (let i = 0; i < variables.length; i++) {\n\t\t\t\tstring = string.replace(/<x\\b[^>]*>/, String(variables[i]));\n\t\t\t}\n\t\t\tif (string.trim() === text.trim()) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\t// Length of computed text and compiled unit\n\t\t// should be equal if its a literal and going\n\t\t// to be a match also the unit text should be\n\t\t// found in the given text that needs to be\n\t\t// translated\n\t\tlet t = source.replace(/<x\\b[^>]*>/g, '');\n\t\tif (se.length === te.length && t && text.includes(t.trim())) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//////////////////////////////////////////////////////////\n\t\t//  Below code should be deprecated as its not always\t\t//\n\t\t// going to provide accurate results and is inefficient\t//\n\t\t//////////////////////////////////////////////////////////\n\n\t\t// Use the source breakdown length over the\n\t\t// text input length as it will always be\n\t\t// equal to or less than.\n\t\tfor (var i = 0; i < se.length; i++) {\n\t\t\tif (te.includes(se[i])) {\n\t\t\t\tmatCnt++;\n\t\t\t}\n\t\t}\n\t\tconst _variableCount = this.removeInterpolation(source).match(/i18nExtendedVariable/g);\n\t\tif (matCnt > 0 && _variableCount) {\n\t\t\tconst variableCount = _variableCount.length;\n\t\t\tif (matCnt + variableCount === te.length) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n  }\n\n  private breakSentanceIntoChars(text: string): RegExpMatchArray | null {\n    return text.match(/\\w+|[^\\s\\w]+/g);\n  }\n\n\tprivate removeInterpolation(text: string): string {\n\t\treturn text.replace(/<x\\b[^>]*>/g, 'i18nExtendedVariable');\n\t}\n\n\tprivate hasInterpretation(text: string): boolean {\n\t\tlet matches = text.match(/<x\\b[^>]*>/g);\n\t\tif (!matches) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn matches.length  > 0;\n\t}\n\n  private digestTranslation(ct: string, source: string, target: string, variables?: Array<string | number>): string {\n\t\tlet t = this.removeInterpolation(target);\n\t\tconst cText = this.breakSentanceIntoChars(ct);\n\t\tconst cSrc = this.breakSentanceIntoChars(this.removeInterpolation(source));\n\t\tconst cTar = this.breakSentanceIntoChars(t);\n\t\tif (!cSrc || !cTar || !cText) {\n\t\t\treturn ct;\n\t\t}\n\n\t\tif (variables) {\n\t\t\tfor (let i = 0; i < variables.length; i++) {\n\t\t\t\tt = t.replace('i18nExtendedVariable', String(variables[i]));\n\t\t\t}\n\t\t\treturn t\n\t\t}\n\n\t\tconst tm = [];\n\t\tfor (let i = 0; i < cText.length; i++) {\n\t\t\tvar wi = cText.indexOf(cSrc[i]);\n\t\t\tif (wi === -1) {\n\t\t\t\ttm.push(cText[i]);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < tm.length; i++) {\n\t\t\tt = t.replace('i18nExtendedVariable', tm[i])\n\t\t}\n\t\treturn t;\n  }\n}\n\ninterface TranslationUnit {\n\tsource: string;\n\ttarget: string;\n}"]}